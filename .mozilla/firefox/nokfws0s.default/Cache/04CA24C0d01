<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                      "http://www.w3.org/TR/html40/loose.dtd">
<HTML>
<!-- Created on October, 2 2007 by texi2html 1.65 -->
<!--
Written by: Lionel Cons <Lionel.Cons@cern.ch> (original author)
            Karl Berry  <karl@freefriends.org>
            Olaf Bachmann <obachman@mathematik.uni-kl.de>
            and many others.
Maintained by: Many creative people <dev@texi2html.cvshome.org>
Send bugs and suggestions to <users@texi2html.cvshome.org>

-->
<HEAD>
<TITLE>CC Mode Manual: Indentation Functions</TITLE>

<META NAME="description" CONTENT="CC Mode Manual: Indentation Functions">
<META NAME="keywords" CONTENT="CC Mode Manual: Indentation Functions">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META NAME="Generator" CONTENT="texi2html 1.65">

</HEAD>

<BODY LANG="en" BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<A NAME="SEC39"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_10.html#SEC38"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_12.html#SEC40"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_10.html#SEC38"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode.html#SEC_Top"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_12.html#SEC40"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_toc.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_20.html#SEC51">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_abt.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1> 11. Indentation Functions </H1>
<!--docid::SEC39::-->
<P>

<A NAME="IDX407"></A>
<A NAME="IDX408"></A>
Often there are cases when a simple offset setting on a syntactic
symbol isn't enough to get the desired indentation.  Therefore, it's
also possible to use an <EM>indentation function</EM> (a.k.a. <EM>line-up
function</EM>) for a syntactic symbol.
</P>
<P>

CC Mode comes with many predefined indentation functions for common
situations.  If none of these does what you want, you can write your
own, see <A HREF="cc-mode_9.html#SEC34">9.5.1 Custom Indentation Functions</A>.  If you do, it's probably a
good idea to start working from one of these predefined functions, they
can be found in the file `<TT>cc-align.el</TT>'.
</P>
<P>

For every function below there is a &quot;works with&quot; list that indicates
which syntactic symbols the function is intended to be used with.
</P>
<P>

<A NAME="IDX409"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-indent-one-line-block</B>
<DD><A NAME="IDX410"></A>
Indent a one line block <CODE>c-basic-offset</CODE> extra.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>if (n &gt; 0)
    {m+=n; n=0;}      &lt;- <I>c-indent-one-line-block</I>@c
&lt;--&gt; <I>c-basic-offset</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>if (n &gt; 0)
{                     &lt;- <I>c-indent-one-line-block</I>@c
    m+=n; n=0;
}
</pre></td></tr></table><P>

The block may be surrounded by any kind of parenthesis characters.
<CODE>nil</CODE> is returned if the line doesn't start with a one line block,
which makes the function usable in list expressions.
</P>
<P>

Works with: Almost all syntactic symbols, but most useful on the
<CODE>-open</CODE> symbols.
</P>
</DL>
<P>

<A NAME="IDX411"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-indent-multi-line-block</B>
<DD><A NAME="IDX412"></A>
Indent a multiline block <CODE>c-basic-offset</CODE> extra.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int *foo[] = {
    NULL,                 
    {17},             &lt;- <I>c-indent-multi-line-block</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int *foo[] = {
    NULL,
        {             &lt;- <I>c-indent-multi-line-block</I>@c
        17
        },
    &lt;--&gt; <I>c-basic-offset</I>@c
</pre></td></tr></table><P>

The block may be surrounded by any kind of parenthesis characters.
<CODE>nil</CODE> is returned if the line doesn't start with a multiline
block, which makes the function usable in list expressions.
</P>
<P>

Works with: Almost all syntactic symbols, but most useful on the
<CODE>-open</CODE> symbols.
</P>
</DL>
<P>

<A NAME="IDX413"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-argcont</B>
<DD><A NAME="IDX414"></A>
Line up a continued argument.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>foo (xyz, aaa + bbb + ccc
          + ddd + eee + fff);  &lt;- <I>c-lineup-argcont</I>@c
</pre></td></tr></table><P>

Only continuation lines like this are touched, <CODE>nil</CODE> is returned on
lines which are the start of an argument.
</P>
<P>

Within a gcc <CODE>asm</CODE> block, <CODE>:</CODE> is recognised as an argument
separator, but of course only between operand specifications, not in the
expressions for the operands.
</P>
<P>

Works with: <CODE>arglist-cont</CODE>, <CODE>arglist-cont-nonempty</CODE>.
</P>
</DL>
<P>

<A NAME="IDX415"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-arglist</B>
<DD><A NAME="IDX416"></A>
Line up the current argument line under the first argument.
<P>

As a special case, if an argument on the same line as the open
parenthesis starts with a brace block opener, the indentation is
<CODE>c-basic-offset</CODE> only.  This is intended as a &quot;DWIM&quot; measure in
cases like macros that contains statement blocks, e.g:
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>A_VERY_LONG_MACRO_NAME ({
        some (code, with + long, lines * in[it]);
    });
&lt;--&gt; <I>c-basic-offset</I>@c
</pre></td></tr></table><P>

This is motivated partly because it's more in line with how code
blocks are handled, and partly since it approximates the behavior of
earlier CC Mode versions, which due to inaccurate analysis tended to
indent such cases this way.
</P>
<P>

Works with: <CODE>arglist-cont-nonempty</CODE>, <CODE>arglist-close</CODE>.
</P>
</DL>
<P>

<A NAME="IDX417"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-arglist-intro-after-paren</B>
<DD><A NAME="IDX418"></A>
Line up a line to just after the open paren of the surrounding paren or
brace block.
<P>

Works with: <CODE>defun-block-intro</CODE>, <CODE>brace-list-intro</CODE>,
<CODE>statement-block-intro</CODE>, <CODE>statement-case-intro</CODE>,
<CODE>arglist-intro</CODE>.
</P>
</DL>
<P>

<A NAME="IDX419"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-arglist-close-under-paren</B>
<DD><A NAME="IDX420"></A>
Set your <CODE>arglist-close</CODE> syntactic symbol to this line-up function
so that parentheses that close argument lists will line up under the
parenthesis that opened the argument list.  It can also be used with
<CODE>arglist-cont</CODE> and <CODE>arglist-cont-nonempty</CODE> to line up all
lines inside a parenthesis under the open paren.
<P>

As a special case, if a brace block is opened at the same line as the
open parenthesis of the argument list, the indentation is
<CODE>c-basic-offset</CODE> only.  See <CODE>c-lineup-arglist</CODE> for further
discussion of this &quot;DWIM&quot; measure.
</P>
<P>

Works with: Almost all symbols, but are typically most useful on
<CODE>arglist-close</CODE>, <CODE>brace-list-close</CODE>, <CODE>arglist-cont</CODE> and
<CODE>arglist-cont-nonempty</CODE>.
</P>
</DL>
<P>

<A NAME="IDX421"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-arglist-operators</B>
<DD><A NAME="IDX422"></A>
Line up lines starting with an infix operator under the open paren.
Return <CODE>nil</CODE> on lines that don't start with an operator, to leave
those cases to other lineup functions.  Example:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>if (  x &lt; 10
   || at_limit (x,     &lt;- <I>c-lineup-arglist-operators</I>@c
                list)  &lt;- <I>c-lineup-arglist-operators returns nil</I>@c
   )
</pre></td></tr></table><P>

Since this function doesn't do anything for lines without an infix
operator you typically want to use it together with some other lineup
settings, e.g. as follows (the <CODE>arglist-close</CODE> setting is just a
suggestion to get a consistent style):
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>(c-set-offset 'arglist-cont
              '(c-lineup-arglist-operators 0))
(c-set-offset 'arglist-cont-nonempty
              '(c-lineup-arglist-operators c-lineup-arglist))
(c-set-offset 'arglist-close
              '(c-lineup-arglist-close-under-paren))
</pre></td></tr></table><P>

Works with: <CODE>arglist-cont</CODE>, <CODE>arglist-cont-nonempty</CODE>.
</P>
</DL>
<P>

<A NAME="IDX423"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-C-comments</B>
<DD><A NAME="IDX424"></A>
Line up C block comment continuation lines.  Various heuristics are used
to handle most of the common comment styles.  Some examples:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>/*                 /**               /*
 * text             * text             text
 */                 */               */
</pre></td></tr></table><P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>/* text            /*                /**
   text            ** text            ** text
*/                 */                 */
</pre></td></tr></table><P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>/**************************************************
 * text
 *************************************************/
</pre></td></tr></table><P>

<A NAME="IDX425"></A>
<TABLE><tr><td>&nbsp;</td><td class=example><pre>/**************************************************
    Free form text comments:
 In comments with a long delimiter line at the
 start, the indentation is kept unchanged for lines
 that start with an empty comment line prefix.  The
 delimiter line is whatever matches the
 <CODE>comment-start-skip</CODE> regexp.
**************************************************/
</pre></td></tr></table><P>

The style variable <CODE>c-comment-prefix-regexp</CODE> is used to recognize
the comment line prefix, e.g. the `<SAMP>*</SAMP>' that usually starts every
line inside a comment.
</P>
<P>

Works with: The <CODE>c</CODE> syntactic symbol.
</P>
</DL>
<P>

<A NAME="IDX426"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-cascaded-calls</B>
<DD><A NAME="IDX427"></A>
Line up &quot;cascaded calls&quot; under each other.  If the line begins with
<CODE>-&gt;</CODE> or <CODE>.</CODE> and the preceding line ends with one or more
function calls preceded by the same token, then the arrow is lined up
with the first of those tokens.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>r = proc-&gt;add(17)-&gt;add(18)
        -&gt;add(19) +         &lt;- <I>c-lineup-cascaded-calls</I>@c
  offset;                   &lt;- <I>c-lineup-cascaded-calls (inactive)</I>@c
</pre></td></tr></table><P>

In any other situation <CODE>nil</CODE> is returned to allow use in list
expressions.
</P>
<P>

Works with: <CODE>topmost-intro-cont</CODE>, <CODE>statement-cont</CODE>,
<CODE>arglist-cont</CODE>, <CODE>arglist-cont-nonempty</CODE>.
</P>
</DL>
<P>

<A NAME="IDX428"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-close-paren</B>
<DD><A NAME="IDX429"></A>
Line up the closing paren under its corresponding open paren if the
open paren is followed by code.  If the open paren ends its line, no
indentation is added.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>main (int,
      char **           
     )                &lt;- <I>c-lineup-close-paren</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>main (
    int, char **
)                     &lt;- <I>c-lineup-close-paren</I>@c
</pre></td></tr></table><P>

As a special case, if a brace block is opened at the same line as the
open parenthesis of the argument list, the indentation is
<CODE>c-basic-offset</CODE> instead of the open paren column.  See
<CODE>c-lineup-arglist</CODE> for further discussion of this &quot;DWIM&quot; measure.
</P>
<P>

Works with: All <CODE>*-close</CODE> symbols.
</P>
</DL>
<P>

<A NAME="IDX430"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-comment</B>
<DD><A NAME="IDX431"></A>
Line up a comment-only line according to the style variable
<CODE>c-comment-only-line-offset</CODE>.  If the comment is lined up with a
comment starter on the previous line, that alignment is preserved.
<P>

<A NAME="IDX432"></A>
</P>
<DL>
<DT><U>User Option:</U> <B>c-comment-only-line-offset</B>
<DD><A NAME="IDX433"></A>
This style variable specifies the extra offset for the line.  It can
contain an integer or a cons cell of the form
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>(<VAR>non-anchored-offset</VAR> . <VAR>anchored-offset</VAR>)
</pre></td></tr></table><P>

where <VAR>non-anchored-offset</VAR> is the amount of offset given to
non-column-zero anchored lines, and <VAR>anchored-offset</VAR> is the amount
of offset to give column-zero anchored lines.  Just an integer as value
is equivalent to <CODE>(<VAR>value</VAR> . -1000)</CODE>.
</P>
</DL>
<P>

Works with: <CODE>comment-intro</CODE>.
</P>
</DL>
<P>

<A NAME="IDX434"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-cpp-define</B>
<DD><A NAME="IDX435"></A>
Line up macro continuation lines according to the indentation of the
construct preceding the macro.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>const char msg[] =    &lt;- <I>The beginning of the preceding construct.</I>@c
  \&quot;Some text.\&quot;;

#define X(A, B)  \
do {             \    &lt;- <I>c-lineup-cpp-define</I>@c
  printf (A, B); \
} while (0)
</pre></td></tr></table><P>

and:
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int dribble() {
  if (!running)       &lt;- <I>The beginning of the preceding construct.</I>@c
    error(\&quot;Not running!\&quot;);

#define X(A, B)    \
  do {             \  &lt;- <I>c-lineup-cpp-define</I>@c
    printf (A, B); \
  } while (0)
</pre></td></tr></table><P>

If <CODE>c-syntactic-indentation-in-macros</CODE> is non-<CODE>nil</CODE>, the
function returns the relative indentation to the macro start line to
allow accumulation with other offsets.  E.g. in the following cases,
<CODE>cpp-define-intro</CODE> is combined with the
<CODE>statement-block-intro</CODE> that comes from the `<SAMP>do {</SAMP>' that hangs
on the `<SAMP>#define</SAMP>' line:
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>const char msg[] =
  \&quot;Some text.\&quot;;

#define X(A, B) do { \
  printf (A, B);     \  &lt;- <I>c-lineup-cpp-define</I>@c
  this-&gt;refs++;      \
} while (0)             &lt;- <I>c-lineup-cpp-define</I>@c
</pre></td></tr></table><P>

and:
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int dribble() {
  if (!running)
    error(\&quot;Not running!\&quot;);

#define X(A, B) do { \
    printf (A, B);   \  &lt;- <I>c-lineup-cpp-define</I>@c
    this-&gt;refs++;    \
  } while (0)           &lt;- <I>c-lineup-cpp-define</I>@c
</pre></td></tr></table><P>

The relative indentation returned by <CODE>c-lineup-cpp-define</CODE> is zero
and two, respectively, on the two lines in each of these examples.  They
are then added to the two column indentation that
<CODE>statement-block-intro</CODE> gives in both cases here.
</P>
<P>

If the relative indentation is zero, then <CODE>nil</CODE> is returned
instead.  That is useful in a list expression to specify the default
indentation on the top level.
</P>
<P>

If <CODE>c-syntactic-indentation-in-macros</CODE> is <CODE>nil</CODE> then this
function keeps the current indentation, except for empty lines (ignoring
the ending backslash) where it takes the indentation from the closest
preceding nonempty line in the macro.  If there's no such line in the
macro then the indentation is taken from the construct preceding it, as
described above.
</P>
<P>

Works with: <CODE>cpp-define-intro</CODE>.
</P>
</DL>
<P>

<A NAME="IDX436"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-dont-change</B>
<DD><A NAME="IDX437"></A>
This lineup function makes the line stay at whatever indentation it
already has; think of it as an identity function for lineups.
<P>

Works with: Any syntactic symbol.
</P>
</DL>
<P>

<A NAME="IDX438"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-gcc-asm-reg</B>
<DD><A NAME="IDX439"></A>
Line up a gcc asm register under one on a previous line.
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>    asm (&quot;foo %1, %0\n&quot;
         &quot;bar %0, %1&quot;
         : &quot;=r&quot; (w),
           &quot;=r&quot; (x)
         :  &quot;0&quot; (y),
            &quot;1&quot; (z));
</pre></td></tr></table><P>

The `<SAMP>x</SAMP>' line is aligned to the text after the `<SAMP>:</SAMP>' on the
`<SAMP>w</SAMP>' line, and similarly `<SAMP>z</SAMP>' under `<SAMP>y</SAMP>'.
</P>
<P>

This is done only in an `<SAMP>asm</SAMP>' or `<SAMP>__asm__</SAMP>' block, and only to
those lines mentioned.  Anywhere else <CODE>nil</CODE> is returned.  The usual
arrangement is to have this routine as an extra feature at the start of
arglist lineups, e.g.
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>(c-lineup-gcc-asm-reg c-lineup-arglist)
</pre></td></tr></table><P>

Works with: <CODE>arglist-cont</CODE>, <CODE>arglist-cont-nonempty</CODE>.
</P>
</DL>
<P>

<A NAME="IDX440"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-inexpr-block</B>
<DD><A NAME="IDX441"></A>
This can be used with the in-expression block symbols to indent the
whole block to the column where the construct is started.  E.g. for Java
anonymous classes, this lines up the class under the `<SAMP>new</SAMP>' keyword,
and in Pike it lines up the lambda function body under the `<SAMP>lambda</SAMP>'
keyword.  Returns <CODE>nil</CODE> if the block isn't part of such a
construct.
<P>

Works with: <CODE>inlambda</CODE>, <CODE>inexpr-statement</CODE>,
<CODE>inexpr-class</CODE>.
</P>
</DL>
<P>

<A NAME="IDX442"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-java-inher</B>
<DD><A NAME="IDX443"></A>
Line up Java implements and extends declarations.  If class names
follow on the same line as the `<SAMP>implements</SAMP>'/`<SAMP>extends</SAMP>'
keyword, they are lined up under each other.  Otherwise, they are
indented by adding <CODE>c-basic-offset</CODE> to the column of the keyword.
E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>class Foo
    extends           
        Bar           &lt;- <I>c-lineup-java-inher</I>@c
    &lt;--&gt; <I>c-basic-offset</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>class Foo
    extends Cyphr,
            Bar       &lt;- <I>c-lineup-java-inher</I>@c
</pre></td></tr></table><P>

Works with: <CODE>inher-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX444"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-java-throws</B>
<DD><A NAME="IDX445"></A>
Line up Java throws declarations.  If exception names follow on the
same line as the throws keyword, they are lined up under each other.
Otherwise, they are indented by adding <CODE>c-basic-offset</CODE> to the
column of the `<SAMP>throws</SAMP>' keyword.  The `<SAMP>throws</SAMP>' keyword itself
is also indented by <CODE>c-basic-offset</CODE> from the function declaration
start if it doesn't hang.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int foo()
    throws            &lt;- <I>c-lineup-java-throws</I>@c
        Bar           &lt;- <I>c-lineup-java-throws</I>@c
&lt;--&gt;&lt;--&gt; <I>c-basic-offset</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int foo() throws Cyphr,
                 Bar,    &lt;- <I>c-lineup-java-throws</I>@c
                 Vlod    &lt;- <I>c-lineup-java-throws</I>@c
</pre></td></tr></table><P>

Works with: <CODE>func-decl-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX446"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-knr-region-comment</B>
<DD><A NAME="IDX447"></A>
Line up a comment in the &quot;K&amp;R region&quot; with the declaration.  That is
the region between the function or class header and the beginning of the
block.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int main()
/* Called at startup. */  &lt;- <I>c-lineup-knr-region-comment</I>@c
{
  return 0;
}
</pre></td></tr></table><P>

Return <CODE>nil</CODE> if called in any other situation, to be useful in list
expressions.
</P>
<P>

Works with: <CODE>comment-intro</CODE>.
</P>
</DL>
<P>

<A NAME="IDX448"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-math</B>
<DD><A NAME="IDX449"></A>
Line up the current line to after the equal sign on the first line in the
statement.  If there isn't any, indent with <CODE>c-basic-offset</CODE>.  If
the current line contains an equal sign too, try to align it with the
first one.
<P>

Works with: <CODE>topmost-intro-cont</CODE>, <CODE>statement-cont</CODE>,
<CODE>arglist-cont</CODE>, <CODE>arglist-cont-nonempty</CODE>.
</P>
</DL>
<P>

<A NAME="IDX450"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-multi-inher</B>
<DD><A NAME="IDX451"></A>
Line up the classes in C++ multiple inheritance clauses and member
initializers under each other.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>Foo::Foo (int a, int b):
    Cyphr (a),
    Bar (b)           &lt;- <I>c-lineup-multi-inher</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>class Foo
    : public Cyphr,
      public Bar      &lt;- <I>c-lineup-multi-inher</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>Foo::Foo (int a, int b)
    : Cyphr (a)
    , Bar (b)         &lt;- <I>c-lineup-multi-inher</I>@c
</pre></td></tr></table><P>

Works with: <CODE>inher-cont</CODE>, <CODE>member-init-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX452"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-ObjC-method-call</B>
<DD><A NAME="IDX453"></A>
For Objective-C code, line up selector args as Emacs Lisp mode does
with function args: go to the position right after the message receiver,
and if you are at the end of the line, indent the current line
c-basic-offset columns from the opening bracket; otherwise you are
looking at the first character of the first method call argument, so
lineup the current line with it.
<P>

Works with: <CODE>objc-method-call-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX454"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-ObjC-method-args</B>
<DD><A NAME="IDX455"></A>
For Objective-C code, line up the colons that separate args.  The colon
on the current line is aligned with the one on the first line.
<P>

Works with: <CODE>objc-method-args-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX456"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-ObjC-method-args-2</B>
<DD><A NAME="IDX457"></A>
Similar to <CODE>c-lineup-ObjC-method-args</CODE> but lines up the colon on
the current line with the colon on the previous line.
<P>

Works with: <CODE>objc-method-args-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX458"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-runin-statements</B>
<DD><A NAME="IDX459"></A>
Line up statements for coding standards which place the first statement
in a block on the same line as the block opening brace<A NAME="DOCF32" HREF="cc-mode_fot.html#FOOT32">(32)</A>.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int main()
{ puts (&quot;Hello!&quot;);
  return 0;           &lt;- <I>c-lineup-runin-statements</I>@c
}
</pre></td></tr></table><P>

If there is no statement after the opening brace to align with,
<CODE>nil</CODE> is returned.  This makes the function usable in list
expressions.
</P>
<P>

Works with: The <CODE>statement</CODE> syntactic symbol.
</P>
</DL>
<P>

<A NAME="IDX460"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-streamop</B>
<DD><A NAME="IDX461"></A>
Line up C++ stream operators (i.e. `<SAMP>&lt;&lt;</SAMP>' and `<SAMP>&gt;&gt;</SAMP>').
<P>

Works with: <CODE>stream-op</CODE>.
</P>
</DL>
<P>

<A NAME="IDX462"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-string-cont</B>
<DD><A NAME="IDX463"></A>
Line up a continued string under the one it continues.  A continued
string in this sense is where a string literal follows directly after
another one.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>result = prefix + &quot;A message &quot;
                  &quot;string.&quot;;    &lt;- <I>c-lineup-string-cont</I>@c
</pre></td></tr></table><P>

<CODE>nil</CODE> is returned in other situations, to allow stacking with other
lineup functions.
</P>
<P>

Works with: <CODE>topmost-intro-cont</CODE>, <CODE>statement-cont</CODE>,
<CODE>arglist-cont</CODE>, <CODE>arglist-cont-nonempty</CODE>.
</P>
</DL>
<P>

<A NAME="IDX464"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-template-args</B>
<DD><A NAME="IDX465"></A>
Line up the arguments of a template argument list under each other, but
only in the case where the first argument is on the same line as the
opening `<SAMP>&lt;</SAMP>'.
<P>

To allow this function to be used in a list expression, <CODE>nil</CODE> is
returned if there's no template argument on the first line.
</P>
<P>

Works with: <CODE>template-args-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX466"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-topmost-intro-cont</B>
<DD><A NAME="IDX467"></A>
Line up declaration continuation lines zero or one indentation
step<A NAME="DOCF33" HREF="cc-mode_fot.html#FOOT33">(33)</A>.  For lines preceding a
definition, zero is used.  For other lines, <CODE>c-basic-offset</CODE> is
added to the indentation.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>int
neg (int i)           &lt;- <I>c-lineup-topmost-intro-cont</I>@c
{
    return -i;
}
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>struct
larch                 &lt;- <I>c-lineup-topmost-intro-cont</I>@c
{
    double height;
}
    the_larch,        &lt;- <I>c-lineup-topmost-intro-cont</I>@c
    another_larch;    &lt;- <I>c-lineup-topmost-intro-cont</I>@c
&lt;--&gt; <I>c-basic-offset</I>@c
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>struct larch
the_larch,            &lt;- <I>c-lineup-topmost-intro-cont</I>@c
    another_larch;    &lt;- <I>c-lineup-topmost-intro-cont</I>@c
</pre></td></tr></table><P>

Works with: <CODE>topmost-intro-cont</CODE>.
</P>
</DL>
<P>

<A NAME="IDX468"></A>
</P>
<DL>
<DT><U>Function:</U> <B>c-lineup-whitesmith-in-block</B>
<DD><A NAME="IDX469"></A>
Line up lines inside a block in Whitesmith style.  It's done in a way
that works both when the opening brace hangs and when it doesn't.  E.g:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>something
    {
    foo;              &lt;- <I>c-lineup-whitesmith-in-block</I>@c
    }
</pre></td></tr></table><P>

and
</P>
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>something {
    foo;              &lt;- <I>c-lineup-whitesmith-in-block</I>@c
    }
&lt;--&gt; <I>c-basic-offset</I>@c
</pre></td></tr></table><P>

In the first case the indentation is kept unchanged, in the second
<CODE>c-basic-offset</CODE> is added.
</P>
<P>

Works with: <CODE>defun-close</CODE>, <CODE>defun-block-intro</CODE>,
<CODE>block-close</CODE>, <CODE>brace-list-close</CODE>, <CODE>brace-list-intro</CODE>,
<CODE>statement-block-intro</CODE> and all <CODE>in*</CODE> symbols,
e.g. <CODE>inclass</CODE> and <CODE>inextern-lang</CODE>.
</P>
</DL>
<P>

<A NAME="AWK Mode"></A>
<HR SIZE="6">
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_10.html#SEC38"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_12.html#SEC40"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_toc.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_20.html#SEC51">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="cc-mode_abt.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<BR>
<FONT SIZE="-1">
This document was generated
by <I>XEmacs Webmaster</I> on <I>October, 2 2007</I>
using <A HREF="http://texi2html.cvshome.org"><I>texi2html</I></A>
</FONT>

</BODY>
</HTML>
