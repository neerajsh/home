<!-- This HTML file has been created by texi2html 1.27
     from emacs.texi on 3 March 1994 -->

<TITLE>GNU Emacs Manual - Correcting Mistakes (Yours or Emacs's)</TITLE>
<P>Go to the <A HREF="emacs_35.html">previous</A>, <A HREF="emacs_37.html">next</A> section.<P>
<H1><A NAME="SEC361" HREF="emacs_toc.html#SEC361">Correcting Mistakes (Yours or Emacs's)</A></H1>
<P>
  If you type an Emacs command you did not intend, the results are often
mysterious.  This chapter tells what you can do to cancel your mistake or
recover from a mysterious situation.  Emacs bugs and system crashes are
also considered.
<P>
<A NAME="IDX2036"></A>
<H2><A NAME="SEC362" HREF="emacs_toc.html#SEC362">Quitting and Aborting</A></H2>
<P>
<DL COMPACT>
<DT><KBD>C-g</KBD>
<DD>Quit.  Cancel running or partially typed command.
<DT><KBD>C-]</KBD>
<DD>Abort innermost recursive editing level and cancel the command which
invoked it (<CODE>abort-recursive-edit</CODE>).
<DT><KBD>M-x top-level</KBD>
<DD>Abort all recursive editing levels that are currently executing.
<DT><KBD>C-x u</KBD>
<DD>Cancel an already-executed command, usually (<CODE>undo</CODE>).
</DL>
<P>
  There are two ways of cancelling commands which are not finished
executing: <DFN>quitting</DFN> with <KBD>C-g</KBD>, and <DFN>aborting</DFN> with
<KBD>C-]</KBD> or <KBD>M-x top-level</KBD>.  Quitting cancels a partially typed
command or one which is already running.  Aborting exits a recursive
editing level and cancels the command that invoked the recursive edit.
(See section <A HREF="emacs_36.html#SEC365">Recursive Editing Levels</A>.)
<A NAME="IDX2037"></A>
<A NAME="IDX2038"></A>
<P>
  Quitting with <KBD>C-g</KBD> is used for getting rid of a partially typed
command, or a numeric argument that you don't want.  It also stops a
running command in the middle in a relatively safe way, so you can use
it if you accidentally give a command which takes a long time.  In
particular, it is safe to quit out of killing; either your text will
<EM>all</EM> still be in the buffer, or it will <EM>all</EM> be in the kill
ring (or maybe both).  Quitting an incremental search does special
things documented under searching; in general, it may take two
successive <KBD>C-g</KBD> characters to get out of a search.
<P>
  <KBD>C-g</KBD> works by setting the variable <CODE>quit-flag</CODE> to <CODE>t</CODE>
the instant <KBD>C-g</KBD> is typed; Emacs Lisp checks this variable
frequently and quits if it is non-<CODE>nil</CODE>.  <KBD>C-g</KBD> is only
actually executed as a command if you type it while Emacs is waiting for
input.
<P>
  If you quit with <KBD>C-g</KBD> a second time before the first <KBD>C-g</KBD> is
recognized, you activate the "emergency escape" feature and return to
the shell.  See section <A HREF="emacs_36.html#SEC369">Emergency Escape</A>.
<A NAME="IDX2039"></A>
<P>
  There may be times when you cannot quit.  When Emacs is waiting for
the operating system to do something, quitting is impossible unless
special pains are taken for the particular system call within Emacs
where the waiting occurs.  We have done this for the system calls that
users are likely to want to quit from, but it's possible you will find
another.  In one very common case--waiting for file input or output
using NFS--Emacs itself knows how to quit, but most NFS implementations
simply do not allow user programs to stop waiting for NFS when the NFS
server is hung.
<A NAME="IDX2040"></A>
<A NAME="IDX2041"></A>
<A NAME="IDX2042"></A>
<P>
  Aborting with <KBD>C-]</KBD> (<CODE>abort-recursive-edit</CODE>) is used to get
out of a recursive editing level and cancel the command which invoked
it.  Quitting with <KBD>C-g</KBD> does not do this, and could not do this,
because it is used to cancel a partially typed command <EM>within</EM> the
recursive editing level.  Both operations are useful.  For example, if
you are in a recursive edit and type <KBD>C-u 8</KBD> to enter a numeric
argument, you can cancel that argument with <KBD>C-g</KBD> and remain in the
recursive edit.
<A NAME="IDX2043"></A>
<P>
  The command <KBD>M-x top-level</KBD> is equivalent to "enough" <KBD>C-]</KBD>
commands to get you out of all the levels of recursive edits that you are
in.  <KBD>C-]</KBD> gets you out one level at a time, but <KBD>M-x top-level</KBD>
goes out all levels at once.  Both <KBD>C-]</KBD> and <KBD>M-x top-level</KBD> are
like all other commands, and unlike <KBD>C-g</KBD>, in that they are effective
only when Emacs is ready for a command.  <KBD>C-]</KBD> is an ordinary key and
has its meaning only because of its binding in the keymap.
See section <A HREF="emacs_36.html#SEC365">Recursive Editing Levels</A>.
<P>
  <KBD>C-x u</KBD> (<CODE>undo</CODE>) is not strictly speaking a way of cancelling a
command, but you can think of it as cancelling a command already finished
executing.  See section <A HREF="emacs_9.html#SEC29">Undoing Changes</A>.
<P>
<H2><A NAME="SEC363" HREF="emacs_toc.html#SEC363">Dealing with Emacs Trouble</A></H2>
<P>
  This section describes various conditions in which Emacs fails to work
normally, and how to recognize them and correct them.
<P>
<H3><A NAME="SEC364" HREF="emacs_toc.html#SEC364">If <KBD>DEL</KBD> Fails to Delete</A></H3>
<P>
  If you find that <KBD>DEL</KBD> enters Help like <KBD>Control-h</KBD> instead of
deleting a character, your terminal is sending the wrong code for
<KBD>DEL</KBD>.  You can work around this problem by changing the keyboard
translation table (see section <A HREF="emacs_35.html#SEC354">Keyboard Translations</A>).
<P>
<H3><A NAME="SEC365" HREF="emacs_toc.html#SEC365">Recursive Editing Levels</A></H3>
<P>
  Recursive editing levels are important and useful features of Emacs, but
they can seem like malfunctions to the user who does not understand them.
<P>
  If the mode line has square brackets <SAMP>`[...]'</SAMP> around the parentheses
that contain the names of the major and minor modes, you have entered a
recursive editing level.  If you did not do this on purpose, or if you
don't understand what that means, you should just get out of the recursive
editing level.  To do so, type <KBD>M-x top-level</KBD>.  This is called getting
back to top level.  See section <A HREF="emacs_36.html#SEC365">Recursive Editing Levels</A>.
<P>
<H3><A NAME="SEC366" HREF="emacs_toc.html#SEC366">Garbage on the Screen</A></H3>
<P>
  If the data on the screen looks wrong, the first thing to do is see
whether the text is really wrong.  Type <KBD>C-l</KBD>, to redisplay the
entire screen.  If the screen appears correct after this, the problem
was entirely in the previous screen update.
<P>
  Display updating problems often result from an incorrect termcap entry
for the terminal you are using.  The file <TT>`etc/TERMS'</TT> in the Emacs
distribution gives the fixes for known problems of this sort.
<TT>`INSTALL'</TT> contains general advice for these problems in one of its
sections.  Very likely there is simply insufficient padding for certain
display operations.  To investigate the possibility that you have this sort
of problem, try Emacs on another terminal made by a different manufacturer.
If problems happen frequently on one kind of terminal but not another kind,
it is likely to be a bad termcap entry, though it could also be due to a
bug in Emacs that appears for terminals that have or that lack specific
features.
<P>
<H3><A NAME="SEC367" HREF="emacs_toc.html#SEC367">Garbage in the Text</A></H3>
<P>
  If <KBD>C-l</KBD> shows that the text is wrong, try undoing the changes to it
using <KBD>C-x u</KBD> until it gets back to a state you consider correct.  Also
try <KBD>C-h l</KBD> to find out what command you typed to produce the observed
results.
<P>
  If a large portion of text appears to be missing at the beginning or
end of the buffer, check for the word <SAMP>`Narrow'</SAMP> in the mode line.
If it appears, the text is still present, but temporarily off-limits.
To make it accessible again, type <KBD>C-x n w</KBD>.  See section <A HREF="emacs_34.html#SEC323">Narrowing</A>.
<P>
<H3><A NAME="SEC368" HREF="emacs_toc.html#SEC368">Spontaneous Entry to Incremental Search</A></H3>
<P>
  If Emacs spontaneously displays <SAMP>`I-search:'</SAMP> at the bottom of the
screen, it means that the terminal is sending <KBD>C-s</KBD> and <KBD>C-q</KBD>
according to the poorly designed xon/xoff "flow control" protocol.
<P>
  If this happens to you, your best recourse is to put the terminal in a
mode where it will not use flow control, or give it so much padding that
it will never send a <KBD>C-s</KBD>.  (One way to increase the amount of
padding is to set the variable <CODE>baud-rate</CODE> to a larger value.  Its
value is the terminal output speed, measured in the conventional units
of baud.)
<A NAME="IDX2044"></A>
<A NAME="IDX2045"></A>
<A NAME="IDX2046"></A>
<P>
  If you don't succeed in turning off flow control, the next best thing
is to tell Emacs to cope with it.  To do this, call the function
<CODE>enable-flow-control</CODE>.
<A NAME="IDX2047"></A>
<P>
  Typically there are particular terminal types with which you must use
flow control.  You can conveniently ask for flow control on those
terminal types only, using <CODE>enable-flow-control-on</CODE>.  For example,
if you find you must use flow control on VT-100 and H19 terminals, put
the following in your <TT>`.emacs'</TT> file:
<A NAME="IDX2048"></A>
<P>
<PRE>
(enable-flow-control-on "vt100" "h19")
</PRE>
<P>
  When flow control is enabled, you must type <KBD>C-\</KBD> to get the
effect of a <KBD>C-s</KBD>, and type <KBD>C-^</KBD> to get the effect of a
<KBD>C-q</KBD>.  (These aliases work by means of keyboard translations; see
section <A HREF="emacs_35.html#SEC354">Keyboard Translations</A>.)
<P>
<H3><A NAME="SEC369" HREF="emacs_toc.html#SEC369">Emergency Escape</A></H3>
<P>
  Because at times there have been bugs causing Emacs to loop without
checking <CODE>quit-flag</CODE>, a special feature causes Emacs to be suspended
immediately if you type a second <KBD>C-g</KBD> while the flag is already set,
so you can always get out of GNU Emacs.  Normally Emacs recognizes and
clears <CODE>quit-flag</CODE> (and quits!) quickly enough to prevent this from
happening.
<P>
  When you resume Emacs after a suspension caused by multiple <KBD>C-g</KBD>, it
asks two questions before going back to what it had been doing:
<P>
<PRE>
Auto-save? (y or n)
Abort (and dump core)? (y or n)
</PRE>
<P>
Answer each one with <KBD>y</KBD> or <KBD>n</KBD> followed by <KBD>RET</KBD>.
<P>
  Saying <KBD>y</KBD> to <SAMP>`Auto-save?'</SAMP> causes immediate auto-saving of all
modified buffers in which auto-saving is enabled.
<P>
  Saying <KBD>y</KBD> to <SAMP>`Abort (and dump core)?'</SAMP> causes an illegal instruction to be
executed, dumping core.  This is to enable a wizard to figure out why Emacs
was failing to quit in the first place.  Execution does not continue
after a core dump.  If you answer <KBD>n</KBD>, execution does continue.  With
luck, GNU Emacs will ultimately check <CODE>quit-flag</CODE> and quit normally.
If not, and you type another <KBD>C-g</KBD>, it is suspended again.
<P>
  If Emacs is not really hung, just slow, you may invoke the double
<KBD>C-g</KBD> feature without really meaning to.  Then just resume and answer
<KBD>n</KBD> to both questions, and you will arrive at your former state.
Presumably the quit you requested will happen soon.
<P>
  The double-<KBD>C-g</KBD> feature is turned off when Emacs is running under
the X Window System, since the you can use the window manager to kill
Emacs or to create another window and run another program.
<P>
<A NAME="IDX2049"></A>
<A NAME="IDX2050"></A>
<H3><A NAME="SEC370" HREF="emacs_toc.html#SEC370">Help for Total Frustration</A></H3>
<P>
  If using Emacs (or something else) becomes terribly frustrating and none
of the techniques described above solve the problem, Emacs can still help
you.
<P>
  First, if the Emacs you are using is not responding to commands, type
<KBD>C-g C-g</KBD> to get out of it and then start a new one.
<A NAME="IDX2051"></A>
<P>
  Second, type <KBD>M-x doctor <KBD>RET</KBD></KBD>.
<P>
  The doctor will help you feel better.  Each time you say something to
the doctor, you must end it by typing <KBD>RET</KBD> <KBD>RET</KBD>.  This lets
the doctor know you are finished.
<P>
<H2><A NAME="SEC371" HREF="emacs_toc.html#SEC371">Reporting Bugs</A></H2>
<A NAME="IDX2052"></A>
<P>
  Sometimes you will encounter a bug in Emacs.  Although we cannot promise
we can or will fix the bug, and we might not even agree that it is a bug,
we want to hear about bugs you encounter in case we do want to fix them.
<P>
  To make it possible for us to fix a bug, you must report it.  In order
to do so effectively, you must know when and how to do it.
<P>
<H3><A NAME="SEC372" HREF="emacs_toc.html#SEC372">When Is There a Bug</A></H3>
<P>
  If Emacs executes an illegal instruction, or dies with an operating
system error message that indicates a problem in the program (as opposed to
something like "disk full"), then it is certainly a bug.
<P>
  If Emacs updates the display in a way that does not correspond to what is
in the buffer, then it is certainly a bug.  If a command seems to do the
wrong thing but the problem corrects itself if you type <KBD>C-l</KBD>, it is a
case of incorrect display updating.
<P>
  Taking forever to complete a command can be a bug, but you must make
certain that it was really Emacs's fault.  Some commands simply take a long
time.  Type <KBD>C-g</KBD> and then <KBD>C-h l</KBD> to see whether the input Emacs
received was what you intended to type; if the input was such that you
<EM>know</EM> it should have been processed quickly, report a bug.  If you
don't know whether the command should take a long time, find out by looking
in the manual or by asking for assistance.
<P>
  If a command you are familiar with causes an Emacs error message in a
case where its usual definition ought to be reasonable, it is probably a
bug.
<P>
  If a command does the wrong thing, that is a bug.  But be sure you know
for certain what it ought to have done.  If you aren't familiar with the
command, or don't know for certain how the command is supposed to work,
then it might actually be working right.  Rather than jumping to
conclusions, show the problem to someone who knows for certain.
<P>
  Finally, a command's intended definition may not be best for editing
with.  This is a very important sort of problem, but it is also a matter of
judgment.  Also, it is easy to come to such a conclusion out of ignorance
of some of the existing features.  It is probably best not to complain
about such a problem until you have checked the documentation in the usual
ways, feel confident that you understand it, and know for certain that what
you want is not available.  If you are not sure what the command is
supposed to do after a careful reading of the manual, check the index and
glossary for any terms that may be unclear.
<P>
  If you still do not understand, that indicates a bug in the manual,
which you should report.  The manual's job is to make everything clear
to people who are not Emacs experts--including you.  It is just as
important to report documentation bugs as program bugs.
<P>
  If the on-line documentation string of a function or variable disagrees
with the manual, one of them must be wrong; that is a bug.
<P>
<H3><A NAME="SEC373" HREF="emacs_toc.html#SEC373">Understanding Bug Reporting</A></H3>
<A NAME="IDX2053"></A>
<P>
  When you decide that there is a bug, it is important to report it and to
report it in a way which is useful.  What is most useful is an exact
description of what commands you type, starting with the shell command to
run Emacs, until the problem happens.
<P>
  The most important principle in reporting a bug is to report <EM>facts</EM>,
not hypotheses or categorizations.  It is always easier to report the facts,
but people seem to prefer to strain to posit explanations and report
them instead.  If the explanations are based on guesses about how Emacs is
implemented, they will be useless; we will have to try to figure out what
the facts must have been to lead to such speculations.  Sometimes this is
impossible.  But in any case, it is unnecessary work for us.
<P>
  For example, suppose that you type <KBD>C-x C-f /glorp/baz.ugh
<KBD>RET</KBD></KBD>, visiting a file which (you know) happens to be rather large,
and Emacs prints out <SAMP>`I feel pretty today'</SAMP>.  The best way to report
the bug is with a sentence like the preceding one, because it gives all the
facts and nothing but the facts.
<P>
  Do not assume that the problem is due to the size of the file and say,
"When I visit a large file, Emacs prints out <SAMP>`I feel pretty today'</SAMP>."
This is what we mean by "guessing explanations".  The problem is just as
likely to be due to the fact that there is a <SAMP>`z'</SAMP> in the file name.  If
this is so, then when we got your report, we would try out the problem with
some "large file", probably with no <SAMP>`z'</SAMP> in its name, and not find
anything wrong.  There is no way in the world that we could guess that we
should try visiting a file with a <SAMP>`z'</SAMP> in its name.
<P>
  Alternatively, the problem might be due to the fact that the file starts
with exactly 25 spaces.  For this reason, you should make sure that you
inform us of the exact contents of any file that is needed to reproduce the
bug.  What if the problem only occurs when you have typed the <KBD>C-x C-a</KBD>
command previously?  This is why we ask you to give the exact sequence of
characters you typed since starting to use Emacs.
<P>
  You should not even say "visit a file" instead of <KBD>C-x C-f</KBD> unless
you <EM>know</EM> that it makes no difference which visiting command is used.
Similarly, rather than saying "if I have three characters on the line,"
say "after I type <KBD><KBD>RET</KBD> A B C <KBD>RET</KBD> C-p</KBD>," if that is
the way you entered the text.<P>
<H3><A NAME="SEC374" HREF="emacs_toc.html#SEC374">Checklist for Bug Reports</A></H3>
<A NAME="IDX2054"></A>
<P>
  The best way to send a bug report is to mail it electronically to the
Emacs maintainers at <SAMP>`bug-gnu-emacs@prep.ai.mit.edu'</SAMP>.
<P>
  If you'd like to read the bug reports, you can find them on the
repeater newsgroup <SAMP>`gnu.emacs.bugs'</SAMP>; keep in mind, however, that as
a spectator you should not criticize anything about what you see there.
The purpose of bug reports is to give information to the Emacs
maintainers.  Spectators are welcome only as long as they do not
interfere with this.
<P>
  Please do not post bug reports using netnews; mail is more reliable
than netnews about reporting your correct address, which we may need in
order to ask you for more information.
<P>
  If you can't send electronic mail, then mail the bug report on paper
to this address:
<P>
<PRE>
GNU Emacs Bugs
Free Software Foundation
675 Mass Ave
Cambridge, MA 02139
</PRE>
<P>
  We do not promise to fix the bug; but if the bug is serious,
or ugly, or easy to fix, chances are we will want to.
<P>
  To enable maintainers to investigate a bug, your report
should include all these things:
<P>
<UL>
<LI>
The version number of Emacs.  Without this, we won't know whether there
is any point in looking for the bug in the current version of GNU
Emacs.
<P>
You can get the version number by typing <KBD>M-x emacs-version
<KBD>RET</KBD></KBD>.  If that command does not work, you probably have something
other than GNU Emacs, so you will have to report the bug somewhere
else.
<P>
<LI>
The type of machine you are using, and the operating system name and
version number.
<P>
<LI>
The operands you gave to the <CODE>configure</CODE> command when you installed
Emacs.
<P>
<LI>
A complete list of any modifications you have made to the Emacs source.
(We may not have time to investigate the bug unless it happens in an
unmodified Emacs.  But if you've made modifications and don't tell us,
then you are sending us on a wild goose chase.)
<P>
Be precise about these changes.  A description in English is not
enough--send a context diff for them.
<P>
Adding files of your own (such as a machine description for a machine we
don't support) is a modification of the source.
<P>
<LI>
Details of any other deviations from the standard procedure for installing
GNU Emacs.
<P>
<LI>
The complete text of any files needed to reproduce the bug.
<P>
  If you can tell us a way to cause the problem without visiting any files,
please do so.  This makes it much easier to debug.  If you do need files,
make sure you arrange for us to see their exact contents.  For example, it
can often matter whether there are spaces at the ends of lines, or a
newline after the last line in the buffer (nothing ought to care whether
the last line is terminated, but try telling the bugs that).
<P>
<LI>
The precise commands we need to type to reproduce the bug.
<A NAME="IDX2055"></A>
<A NAME="IDX2056"></A>
<P>
  The easy way to record the input to Emacs precisely is to to write a
dribble file.  To start the file, execute the Lisp expression
<P>
<PRE>
(open-dribble-file "~/dribble")
</PRE>
<P>
using <KBD>M-<KBD>ESC</KBD></KBD> or from the <SAMP>`*scratch*'</SAMP> buffer just after
starting Emacs.  From then on, Emacs copies all your input to the
specified dribble file until the Emacs process is killed.
<P>
<A NAME="IDX2057"></A>
<A NAME="IDX2058"></A>
<A NAME="IDX2059"></A>
<LI>
For possible display bugs, the terminal type (the value of environment
variable <CODE>TERM</CODE>), the complete termcap entry for the terminal from
<TT>`/etc/termcap'</TT> (since that file is not identical on all machines),
and the output that Emacs actually sent to the terminal.
<P>
The way to collect the terminal output is to execute the Lisp expression
<P>
<PRE>
(open-termscript "~/termscript")
</PRE>
<P>
using <KBD>M-<KBD>ESC</KBD></KBD> or from the <SAMP>`*scratch*'</SAMP> buffer just after
starting Emacs.  From then on, Emacs copies all terminal output to the
specified termscript file as well, until the Emacs process is killed.
If the problem happens when Emacs starts up, put this expression into
your <TT>`.emacs'</TT> file so that the termscript file will be open when
Emacs displays the screen for the first time.
<P>
Be warned: it is often difficult, and sometimes impossible, to fix a
terminal-dependent bug without access to a terminal of the type that
stimulates the bug.<P>
<LI>
A description of what behavior you observe that you believe is
incorrect.  For example, "The Emacs process gets a fatal signal," or,
"The resulting text is as follows, which I think is wrong."
<P>
Of course, if the bug is that Emacs gets a fatal signal, then one can't
miss it.  But if the bug is incorrect text, the maintainer might fail to
notice what is wrong.  Why leave it to chance?
<P>
Even if the problem you experience is a fatal signal, you should still
say so explicitly.  Suppose something strange is going on, such as, your
copy of the source is out of sync, or you have encountered a bug in the
C library on your system.  (This has happened!)  Your copy might crash
and the copy here would not.  If you <EM>said</EM> to expect a crash, then
when Emacs here fails to crash, we would know that the bug was not
happening.  If you don't say to expect a crash, then we would not know
whether the bug was happening.  We would not be able to draw any
conclusion from our observations.
<P>
If the manifestation of the bug is an Emacs error message, it is
important to report not just the text of the error message but a
backtrace showing how the Lisp program in Emacs arrived at the error.
To make the backtrace, execute the Lisp expression <CODE>(setq
debug-on-error t)</CODE> before the error happens (that is to say, you
must execute that expression and then make the bug happen).  This causes
the Lisp debugger to run, showing you a backtrace.  Copy the text of the
debugger's backtrace into the bug report.
<P>
This use of the debugger is possible only if you know how to make the
bug happen again.  Do note the error message the first time the bug
happens, so if you can't make it happen again, you can report at least
the error message.
<P>
<LI>
Check whether any programs you have loaded into the Lisp world,
including your <TT>`.emacs'</TT> file, set any variables that may affect the
functioning of Emacs.  Also, see whether the problem happens in a
freshly started Emacs without loading your <TT>`.emacs'</TT> file (start
Emacs with the <CODE>-q</CODE> switch to prevent loading the init file.)  If
the problem does <EM>not</EM> occur then, you must report the precise
contents of any programs that you must load into the Lisp world in order
to cause the problem to occur.
<P>
<LI>
If the problem does depend on an init file or other Lisp programs that
are not part of the standard Emacs system, then you should make sure it
is not a bug in those programs by complaining to their maintainers
first.  After they verify that they are using Emacs in a way that is
supposed to work, they should report the bug.
<P>
<LI>
If you wish to mention something in the GNU Emacs source, show the
portion in its context.  Don't just give a line number.
<P>
The line numbers in the development sources don't match those in your
sources.  It would take extra work for the maintainers to determine what
code is in your version at a given line number, and we could not be
certain.
<P>
<LI>
Additional information from a debugger might enable someone to find a
problem on a machine which he does not have available.  However, you
need to think when you collect this information if you want it to be
useful.
<A NAME="IDX2060"></A>
<P>
For example, many people send just a backtrace, but that is never useful
by itself.  A simple backtrace with arguments conveys little about what
is happening inside GNU Emacs, because most of the arguments listed in
the backtrace are pointers to Lisp objects.  The numeric values of these
pointers have no significance whatever; all that matters is the contents
of the objects they point to (and most of the contents are themselves
pointers).
<A NAME="IDX2061"></A>
<P>
To provide useful information, you need to show the values of Lisp
objects in Lisp notation.  Do this for each variable which is a Lisp
object, in several stack frames near the bottom of the stack.  Look at
the source to see which variables are Lisp objects, because the debugger
thinks of them as integers.
<P>
To show a variable's value in Lisp syntax, first print its value, then
use the GDB command <CODE>pr</CODE> to print the Lisp object in Lisp syntax.
(If you must use another debugger, call the function <CODE>debug_print</CODE>
with the object as an argument.)  The <CODE>pr</CODE> command is defined
by the file <TT>`src/.gdbinit'</TT> in the Emacs distribution, and it works
only if you are debugging a running process (not with a core dump).
</UL>
<P>
Here are some things that are not necessary:
<P>
<UL>
<LI>
A description of the envelope of the bug--this is not necessary for a
reproducible bug.
<P>
Often people who encounter a bug spend a lot of time investigating
which changes to the input file will make the bug go away and which
changes will not affect it.
<P>
This is often time consuming and not very useful, because the way we
will find the bug is by running a single example under the debugger with
breakpoints, not by pure deduction from a series of examples.  You might
as well save time by not doing this.
<P>
Of course, if you can find a simpler example to report <EM>instead</EM> of
the original one, that is a convenience.  Errors in the output will be
easier to spot, running under the debugger will take less time, etc.
<P>
However, simplification is not vital; if you don't want to do this,
please report the bug with your original test case.
<P>
<LI>
A patch for the bug.
<P>
A patch for the bug is useful if it is a good one.  But don't omit the
necessary information, such as the test case, on the assumption that a
patch is all we need.  We might see problems with your patch and decide
to fix the problem another way, or we might not understand it at all.
<P>
And if we can't understand what bug you are trying to fix, or why your
patch should be an improvement, we mustn't install it.  A test case will
help us to understand.
<P>
<LI>
A guess about what the bug is or what it depends on.
<P>
Such guesses are usually wrong.  Even experts can't guess right about
such things without first using the debugger to find the facts.
</UL>
<P>
<H3><A NAME="SEC375" HREF="emacs_toc.html#SEC375">Sending Patches for GNU Emacs</A></H3>
<A NAME="IDX2062"></A>
<A NAME="IDX2063"></A>
<P>
  If you would like to write bug fixes or improvements for GNU Emacs, that
is very helpful.  When you send your changes, please follow these
guidelines to make it easy for the maintainers to use them.
<P>
  If you don't follow these guidelines, your information might still be
useful, but using it will take extra work.  Maintaining GNU Emacs is a
lot of work in the best of circumstances, and we can't keep up unless
you do your best to help.
<P>
<UL>
<LI>
Send an explanation with your changes of what problem they fix or what
improvement they bring about.  For a bug fix, just include a copy of the
bug report, and explain why the change fixes the bug.
<P>
(Referring to a bug report is not as good as including it, because then
we will have to look it up, and we have probably already deleted it if
we've already fixed the bug.)
<P>
<LI>
Always include a proper bug report for the problem you think you have
fixed.  We need to convince ourselves that the change is right before
installing it.  Even if it is correct, we might have trouble
understanding it if we don't have a way to reproduce the problem.
<P>
<LI>
Include all the comments that are appropriate to help people reading the
source in the future understand why this change was needed.
<P>
<LI>
Don't mix together changes made for different reasons.
Send them <EM>individually</EM>.
<P>
If you make two changes for separate reasons, then we might not want to
install them both.  We might want to install just one.  If you send them
all jumbled together in a single set of diffs, we have to do extra work
to disentangle them--to figure out which parts of the change serve
which purpose.  If we don't have time for this, we might have to ignore
your changes entirely.
<P>
If you send each change as soon as you have written it, with its own
explanation, then the two changes never get tangled up, and we can
consider each one properly without any extra work to disentangle them.
<P>
<LI>
Send each change as soon as that change is finished.  Sometimes people
think they are helping us by accumulating many changes to send them all
together.  As explained above, this is absolutely the worst thing you
could do.
<P>
Since you should send each change separately, you might as well send it
right away.  That gives us the option of installing it immediately if it
is important.
<P>
<LI>
Use <SAMP>`diff -c'</SAMP> to make your diffs.  Diffs without context are hard
to install reliably.  More than that, they are hard to study; we must
always study a patch to decide whether we want to install it.  Unidiff
format is better than contextless diffs, but not as easy to read as
<SAMP>`-c'</SAMP> format.
<P>
If you have GNU diff, use <SAMP>`diff -cp'</SAMP>, which shows the name of the
function that each change occurs in.
<P>
<LI>
Write the change log entries for your changes.  This is both to save us
the extra work of writing them, and to help explain your changes so we
can understand them.
<P>
The purpose of the change log is to show people where to find what was
changed.  So you need to be specific about what functions you changed;
in large functions, it's often helpful to indicate where within the
function the change was.
<P>
On the other hand, once you have shown people where to find the change,
you need not explain its purpose. Thus, if you add a new function, all
you need to say about it is that it is new.  If you feel that the
purpose needs explaining, it probably does--but the explanation will be
much more useful if you put it in comments in the code.
<P>
Please read the <TT>`ChangeLog'</TT> file to see what sorts of information
to put in, and to learn the style that we use.  If you would like your
name to appear in the header line showing who made the change, send us
the header line.
<P>
<LI>
When you write the fix, keep in mind that we can't install a change that
would break other systems.  Please think about what effect your change
will have if compiled on another type of system.
<P>
Sometimes people send fixes that <EM>might</EM> be an improvement in
general--but it is hard to be sure of this.  It's hard to install
such changes because we have to study them very carefully.  Of course,
a good explanation of the reasoning by which you concluded the change
was correct can help convince us.
<P>
The safest changes are changes to the configuration files for a
particular machine.  These are safe because they can't create new bugs
on other machines.
<P>
Please help us keep up with the workload by designing the patch in a
form that is clearly safe to install.
</UL>
<P>
<H2><A NAME="SEC376" HREF="emacs_toc.html#SEC376">How To Get Help with GNU Emacs</A></H2>
<P>
If you need help installing, using or changing GNU Emacs, there are two
ways to find it:
<P>
<UL>
<LI>
Send a message to a suitable network mailing list.  First try
<CODE>bug-gnu-emacs@prep.ai.mit.edu</CODE>, and if that brings no response, try
<CODE>help-gnu-emacs@prep.ai.mit.edu</CODE>.
<P>
<LI>
Look in the service directory for someone who might help you for a fee.
The service directory is found in the file named <TT>`etc/SERVICE'</TT> in the
Emacs distribution.
</UL>
<P>Go to the <A HREF="emacs_35.html">previous</A>, <A HREF="emacs_37.html">next</A> section.<P>
