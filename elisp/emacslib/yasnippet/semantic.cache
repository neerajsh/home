;; Object yasnippet/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "yasnippet/"
  :tables (list 
   (semanticdb-table "yasnippet.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1365 1378]) ("yas/key-syntaxes" variable (:default-value (list "w" "w_" "w_." "^ ")) nil [1533 1851]) ("yas/root-directory" variable nil nil [1853 1965]) ("yas/indent-line" variable (:default-value t) nil [1967 2109]) ("make-variable-buffer-local" code nil nil [2110 2155]) ("yas/trigger-key" variable (:default-value (kbd "TAB")) nil [2157 2238]) ("yas/next-field-key" variable (:default-value (kbd "TAB")) nil [2239 2317]) ("yas/keymap" variable (:default-value (make-sparse-keymap)) nil [2319 2386]) ("define-key" code nil nil [2387 2451]) ("define-key" code nil nil [2452 2511]) ("define-key" code nil nil [2512 2581]) ("define-key" code nil nil [2582 2643]) ("define-key" code nil nil [2644 2707]) ("yas/show-all-modes-in-menu" variable nil nil [2709 3274]) ("yas/use-menu" variable (:default-value t) nil [3275 3411]) ("yas/trigger-symbol" variable (:default-value " =>") nil [3412 3510]) ("yas/field-highlight-face" variable (:default-value (quote ((((class color) (background light)) (:background "DarkSeaGreen2")) (t (:background "DimGrey"))))) nil [3512 3701]) ("yas/mirror-highlight-face" variable (:default-value (quote ((((class color) (background light)) (:background "LightYellow2")) (t (:background "gray22"))))) nil [3702 3898]) ("yas/window-system-popup-function" variable (:default-value (function yas/dropdown-list-popup-for-template)) nil [3900 4162]) ("yas/text-popup-function" variable (:default-value (function yas/dropdown-list-popup-for-template)) nil [4163 4448]) ("yas/extra-mode-hooks" variable (:default-value (quote nil)) nil [4450 4700]) ("mapc" code nil nil [4701 4846]) ("yas/after-exit-snippet-hook" variable (:default-value (quote nil)) nil [4848 5119]) ("yas/before-expand-snippet-hook" variable (:default-value (quote nil)) nil [5121 5219]) ("yas/buffer-local-condition" variable (:default-value (quote (if (and (not (bobp)) (or (equal "font-lock-comment-face" (get-char-property (1- (point)) (quote face))) (equal "font-lock-string-face" (get-char-property (1- (point)) (quote face))))) (quote (require-snippet-condition . force-in-comment)) t))) nil [5221 6845]) ("yas/fallback-behavior" variable (:default-value (quote call-other-command)) nil [6847 7133]) ("yas/version" variable (:default-value "0.5.5") nil [7279 7307]) ("yas/snippet-tables" variable (:default-value (make-hash-table)) nil [7309 7423]) ("yas/menu-table" variable (:default-value (make-hash-table)) nil [7424 7520]) ("yas/menu-keymap" variable (:default-value (make-sparse-keymap "YASnippet")) nil [7521 7578]) ("define-key" code nil nil [7638 7711]) ("define-key" code nil nil [7712 7805]) ("define-key" code nil nil [7806 7898]) ("define-key" code nil nil [7899 7963]) ("yas/known-modes" variable (:default-value (quote (ruby-mode rst-mode csharp-mode))) nil [7965 8087]) ("yas/escape-backslash" variable (:constant-flag t :default-value (concat "YASESCAPE" "BACKSLASH" "PROTECTGUARD")) nil [8088 8169]) ("yas/escape-dollar" variable (:constant-flag t :default-value (concat "YASESCAPE" "DOLLAR" "PROTECTGUARD")) nil [8170 8245]) ("yas/escape-backquote" variable (:constant-flag t :default-value (concat "YASESCAPE" "BACKQUOTE" "PROTECTGUARD")) nil [8246 8327]) ("yas/field-regexp" variable (:constant-flag t :default-value (concat "$\\([0-9]+\\)" "\\|" "${\\(?:\\([0-9]+\\):\\)?\\([^}]*\\)}")) nil [8329 8431]) ("yas/snippet-id-seed" variable nil nil [8433 8502]) ("yas/snippet-next-id" function nil nil [8503 8606]) ("yas/overlay-modification-hooks" variable (:default-value (list (quote yas/overlay-modification-hook))) nil [8608 8744]) ("yas/overlay-insert-in-front-hooks" variable (:default-value (list (quote yas/overlay-insert-in-front-hook))) nil [8745 8892]) ("yas/keymap-overlay-modification-hooks" variable (:default-value (list (quote yas/overlay-maybe-insert-behind-hook))) nil [8893 9054]) ("yas/minor-mode-map" variable (:default-value (make-sparse-keymap)) nil [9202 9283]) ("yas/minor-mode-on-hook" variable nil nil [9284 9363]) ("yas/minor-mode-off-hook" variable nil nil [9364 9445]) ("define-minor-mode" code nil nil [9446 9949]) ("yas/minor-mode-on" function (:user-visible-flag t) nil [9951 10050]) ("yas/minor-mode-off" function (:user-visible-flag t) nil [10051 10153]) ("yas/template" type (:members ("content" "name" "condition") :type "struct") nil [10298 10452]) ("yas/snippet" type (:members ("groups" "exit-marker" "id" "overlay") :type "struct") nil [10453 10621]) ("yas/group" type (:members ("primary-field" "fields" "next" "prev" "snippet") :type "struct") nil [10622 10842]) ("yas/field" type (:members ("overlay" "number" "transform" "value") :type "struct") nil [10843 11000]) ("yas/snippet-table" type (:members ("hash" "parent") :type "struct") nil [11001 11181]) ("yas/snippet-valid?" function (:arguments ("snippet")) nil [11183 11411]) ("yas/snippet-add-field" function (:arguments ("snippet" "field")) nil [11413 11882]) ("yas/group-value" function (:arguments ("group")) nil [11884 12034]) ("yas/group-number" function (:arguments ("group")) nil [12035 12162]) ("yas/group-add-field" function (:arguments ("group" "field")) nil [12163 12559]) ("yas/snippet-field-compare" function (:arguments ("field1" "field2")) nil [12561 13026]) ("yas/template-condition-predicate" function (:arguments ("condition")) nil [13028 13321]) ("yas/filter-templates-by-condition" function (:arguments ("templates")) nil [13323 14050]) ("yas/snippet-table-fetch" function (:arguments ("table" "key")) nil [14052 14497]) ("yas/snippet-table-store" function (:arguments ("table" "full-key" "key" "template")) nil [14498 14765]) ("yas/ensure-minor-mode-priority" function nil nil [14911 15239]) ("yas/real-mode?" function (:arguments ("mode")) nil [15241 15624]) ("yas/eval-string" function (:arguments ("string")) nil [15626 15927]) ("yas/calculate-field-value" function (:arguments ("field" "value")) nil [15928 16230]) ("yas/replace-all" function (:arguments ("from" "to")) nil [16231 16401]) ("yas/snippet-table" function (:arguments ("mode")) nil [16403 16655]) ("yas/current-snippet-table" function nil nil [16656 16778]) ("yas/menu-keymap-for-mode" function (:arguments ("mode")) nil [16780 17030]) ("yas/current-key" function nil nil [17032 17685]) ("yas/synchronize-fields" function (:arguments ("field-group")) nil [17687 18683]) ("yas/overlay-modification-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [18687 18922]) ("yas/overlay-insert-in-front-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [18923 19460]) ("yas/overlay-maybe-insert-behind-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [19461 20851]) ("yas/undo-expand-snippet" function (:arguments ("start" "end" "key" "snippet")) nil [20853 21402]) ("yas/expand-snippet" function (:arguments ("start" "end" "template")) nil [21404 26860]) ("yas/current-snippet-overlay" function (:arguments ("&optional" "point")) nil [26862 27381]) ("yas/snippet-of-current-keymap" function (:arguments ("&optional" "point")) nil [27383 27895]) ("yas/current-overlay-for-navigation" function nil nil [27897 28484]) ("yas/navigate-group" function (:arguments ("group" "next?")) nil [28486 28836]) ("yas/parse-template" function nil nil [28838 29899]) ("yas/directory-files" function (:arguments ("directory" "file?")) nil [29901 30227]) ("yas/make-menu-binding" function (:arguments ("template")) nil [30229 30406]) ("yas/modify-alist" function (:arguments ("alist" "key" "value")) nil [30408 30642]) ("yas/fake-keymap-for-popup" function (:arguments ("templates")) nil [30644 30952]) ("yas/point-to-coord" function (:arguments ("&optional" "point")) nil [30954 31364]) ("yas/x-popup-menu-for-template" function (:arguments ("templates")) nil [31367 31573]) ("yas/text-popup-for-template" function (:arguments ("templates")) nil [31574 31733]) ("yas/dropdown-list-popup-for-template" function (:arguments ("templates")) nil [31734 32325]) ("yas/popup-for-template" function (:arguments ("templates")) nil [32327 32497]) ("yas/load-directory-1" function (:arguments ("directory" "&optional" "parent")) nil [32499 33112]) ("yas/quote-string" function (:arguments ("string")) nil [33114 33317]) ("yas/compile-bundle" function (:arguments ("&optional" "yasnippet" "yasnippet-bundle" "snippet-roots" "code")) nil [33319 35657]) ("yas/about" function nil nil [35805 35941]) ("yas/reload-all" function (:user-visible-flag t) nil [35942 36257]) ("yas/load-directory" function (:user-visible-flag t :arguments ("directory")) nil [36259 36826]) ("yas/initialize" function nil nil [36828 37272]) ("yas/define-snippets" function (:arguments ("mode" "snippets" "&optional" "parent-mode")) nil [37274 38886]) ("yas/set-mode-parent" function (:arguments ("mode" "parent")) nil [38888 39224]) ("yas/define" function (:arguments ("mode" "key" "template" "&optional" "name" "condition")) nil [39226 39671]) ("yas/hippie-try-expand" function (:arguments ("first-time?")) nil [39678 40105]) ("yas/expand" function (:user-visible-flag t) nil [40107 41113]) ("yas/next-field-group" function (:user-visible-flag t) nil [41121 42210]) ("yas/prev-field-group" function (:user-visible-flag t) nil [42212 42955]) ("yas/exit-snippet" function (:user-visible-flag t :arguments ("snippet")) nil [42957 43482]) ("yasnippet" package nil nil [43484 43504]) ("c-neutralize-syntax-in-CPP" function (:arguments ("around" "yas-mp/c-neutralize-syntax-in-CPP" "activate")) nil [43824 44148]) ("cl" include nil nil [46539 46552]) ("dropdown-list-face" variable (:user-visible-flag t :default-value (quote ((t :inherit default :background "lightyellow" :foreground "black")))) nil [46628 46762]) ("dropdown-list-selection-face" variable (:user-visible-flag t :default-value (quote ((t :inherit dropdown-list-face :background "purple")))) nil [46764 46894]) ("dropdown-list-overlays" variable nil nil [46896 46931]) ("dropdown-list-hide" function nil nil [46933 47045]) ("dropdown-list-put-overlay" function (:arguments ("beg" "end" "&optional" "prop" "value" "prop2" "value2")) nil [47047 47299]) ("dropdown-list-line" function (:arguments ("start" "replacement" "&optional" "no-insert")) nil [47301 48784]) ("dropdown-list-start-column" function (:arguments ("display-width")) nil [48786 49121]) ("dropdown-list-move-to-start-line" function (:arguments ("candidate-count")) nil [49123 49718]) ("dropdown-list-at-point" function (:arguments ("candidates" "&optional" "selidx")) nil [49720 51079]) ("dropdown-list" function (:arguments ("candidates")) nil [51081 52963]) ("define-key*" function (:arguments ("keymap" "key" "command")) nil [52965 53210]) ("combine-command" function (:arguments ("command" "defs")) nil [53212 53738]) ("command-selector-last-command" variable nil nil [53740 53812]) ("command-selector" function (:arguments ("&rest" "candidates")) nil [53814 54705]) ("dropdown-list" package nil nil [54729 54753]))
    :file "yasnippet.el"
    :pointmax 54857
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
